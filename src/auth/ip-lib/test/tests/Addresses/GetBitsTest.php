<?php

namespace IPLib\Test\Addresses;

use IPLib\Factory;
use IPLib\Test\TestCase;

class GetBitsTest extends TestCase
{
    public function provideTestCases()
    {
        return array(
            array('00000000000000000000000000000000', '0.0.0.0'),
            array('00000000000000000000000000000001', '0.0.0.1'),
            array('01111111000000000000000000000001', '127.0.0.1'),
            array('11111111111111111111111111111110', '255.255.255.254'),
            array('11111111111111111111111111111111', '255.255.255.255'),
            array('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '::'),
            array('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', '::1'),
            array('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000', '0:0:0:0:0:0:1:0'),
            array('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000', '0:0:0:0:0:1::'),
            array('00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000', '0:0:0:0:1::'),
            array('00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000', '0:0:0:1::'),
            array('00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000', '0:0:1::'),
            array('00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '0:1::'),
            array('00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '1::'),
            array('00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '2::'),
            array('00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '10::'),
            array('00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '100::'),
            array('00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '1000::'),
            array('10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '8000::'),
            array('11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110', 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe'),
            array('11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111', 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'),
        );
    }

    /**
     * @dataProvider provideTestCases
     *
     * @param string $expectedBits
     * @param string $address
     */
    public function testGetBits($expectedBits, $address)
    {
        $ip = Factory::addressFromString($address);
        $this->assertNotNull($ip, "'{$address}' has been detected as an invalid IP, but it should be valid");
        $this->assertSame($expectedBits, $ip->getBits());
    }
}
